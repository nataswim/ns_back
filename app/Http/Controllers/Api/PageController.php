<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Page;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class PageController extends Controller
{
    /**
     * ðŸ‡¬ðŸ‡§ Display a listing of the resource.
     * ðŸ‡«ðŸ‡· Afficher la liste des pages.
     */
    public function index()
    {
        $pages = Page::all();
        return response()->json($pages, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Store a newly created resource in storage.
     * ðŸ‡«ðŸ‡· Enregistrer une nouvelle page dans la base de donnÃ©es.
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'title' => 'required|max:255', // ðŸ‡¬ðŸ‡§ Title is required / ðŸ‡«ðŸ‡· Le titre est obligatoire
            'content' => 'required', // ðŸ‡¬ðŸ‡§ Content is required / ðŸ‡«ðŸ‡· Le contenu est obligatoire
            'page_category' => 'nullable|max:255', // ðŸ‡¬ðŸ‡§ Optional category / ðŸ‡«ðŸ‡· CatÃ©gorie facultative
            'upload_id' => 'nullable|exists:uploads,id', // ðŸ‡¬ðŸ‡§ Must reference a valid upload / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un fichier uploadÃ© valide
            'user_id' => 'required|exists:users,id', // ðŸ‡¬ðŸ‡§ Must reference a valid user / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un utilisateur valide
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $page = Page::create($request->validated());
        return response()->json($page, 201);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Display the specified resource.
     * ðŸ‡«ðŸ‡· Afficher une page spÃ©cifique.
     */
    public function show(Page $page)
    {
        return response()->json($page, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Update the specified resource in storage.
     * ðŸ‡«ðŸ‡· Mettre Ã  jour une page existante.
     */
    public function update(Request $request, Page $page)
    {
        $validator = Validator::make($request->all(), [
            'title' => 'required|max:255', // ðŸ‡¬ðŸ‡§ Title is required / ðŸ‡«ðŸ‡· Le titre est obligatoire
            'content' => 'required', // ðŸ‡¬ðŸ‡§ Content is required / ðŸ‡«ðŸ‡· Le contenu est obligatoire
            'page_category' => 'nullable|max:255', // ðŸ‡¬ðŸ‡§ Optional category / ðŸ‡«ðŸ‡· CatÃ©gorie facultative
            'upload_id' => 'nullable|exists:uploads,id', // ðŸ‡¬ðŸ‡§ Must reference a valid upload / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un fichier uploadÃ© valide
            'user_id' => 'required|exists:users,id', // ðŸ‡¬ðŸ‡§ Must reference a valid user / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un utilisateur valide
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $page->update($request->validated());
        return response()->json($page, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Remove the specified resource from storage.
     * ðŸ‡«ðŸ‡· Supprimer une page spÃ©cifique de la base de donnÃ©es.
     */
    public function destroy(Page $page)
    {
        $page->delete();
        return response()->json(null, 204);
    }
}
