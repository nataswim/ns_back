<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Mylist;
use App\Models\MylistItem;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class MylistItemController extends Controller
{
    /**
     * ðŸ‡¬ðŸ‡§ Display a listing of the items for a given mylist.
     * ðŸ‡«ðŸ‡· Afficher la liste des Ã©lÃ©ments d'une liste personnelle donnÃ©e.
     */
    public function index(Mylist $mylist)
    {
        return response()->json($mylist->mylistItems, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Store a new item in a given mylist.
     * ðŸ‡«ðŸ‡· Ajouter un nouvel Ã©lÃ©ment Ã  une liste personnelle donnÃ©e.
     */
    public function store(Request $request, Mylist $mylist)
    {
        $validator = Validator::make($request->all(), [
            'item_id' => 'required|integer',  // ðŸ‡¬ðŸ‡§ Validate the ID / ðŸ‡«ðŸ‡· Valider l'ID
            'item_type' => 'required|string|max:255', // ðŸ‡¬ðŸ‡§ Validate the type / ðŸ‡«ðŸ‡· Valider le type
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $itemType = $request->input('item_type');
        $itemId = $request->input('item_id');

        // ðŸ‡¬ðŸ‡§ Check if the item exists based on its type
        // ðŸ‡«ðŸ‡· VÃ©rifier si l'Ã©lÃ©ment existe en fonction de son type
        switch ($itemType) {
            case 'exercise':
                $item = \App\Models\Exercise::find($itemId);
                break;
            case 'workout':
                $item = \App\Models\Workout::find($itemId);
                break;
            case 'plan':
                $item = \App\Models\Plan::find($itemId);
                break;
            default:
                return response()->json(['error' => 'Invalid item type.'], 400);
        }

        if (!$item) {
            return response()->json(['error' => 'Item not found.'], 404);
        }

        $mylistItem = new MylistItem();
        $mylistItem->mylist_id = $mylist->id;
        $mylistItem->item_id = $itemId;
        $mylistItem->item_type = $itemType;
        $mylistItem->save();

        return response()->json($mylistItem, 201);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Remove an item from a given mylist.
     * ðŸ‡«ðŸ‡· Supprimer un Ã©lÃ©ment d'une liste personnelle donnÃ©e.
     */
    public function destroy(Mylist $mylist, MylistItem $mylistItem)
    {
        // ðŸ‡¬ðŸ‡§ Ensure the item belongs to the list
        // ðŸ‡«ðŸ‡· VÃ©rifier que l'Ã©lÃ©ment appartient bien Ã  la liste
        if ($mylistItem->mylist_id !== $mylist->id) {
            return response()->json(['error' => 'Item does not belong to this list.'], 400);
        }

        $mylistItem->delete();
        return response()->json(null, 204);
    }
}
