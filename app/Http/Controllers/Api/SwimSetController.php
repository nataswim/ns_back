<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\SwimSet;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class SwimSetController extends Controller
{
    /**
     * ðŸ‡¬ðŸ‡§ Display a listing of the resource.
     * ðŸ‡«ðŸ‡· Afficher la liste des sÃ©ries de natation.
     */
    public function index()
    {
        $swimSets = SwimSet::all();
        return response()->json($swimSets, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Store a newly created resource in storage.
     * ðŸ‡«ðŸ‡· Enregistrer une nouvelle sÃ©rie de natation dans la base de donnÃ©es.
     */
    public function store(Request $request)
    {
        // ðŸ‡¬ðŸ‡§ Validate the request data
        // ðŸ‡«ðŸ‡· Valider les donnÃ©es de la requÃªte
        $validator = Validator::make($request->all(), [
            'workout_id' => 'nullable|exists:workouts,id', // ðŸ‡¬ðŸ‡§ Must reference a valid workout / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer une sÃ©ance valide
            'exercise_id' => 'nullable|exists:exercises,id', // ðŸ‡¬ðŸ‡§ Must reference a valid exercise / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un exercice valide
            'set_distance' => 'nullable|integer', // ðŸ‡¬ðŸ‡§ Distance must be an integer / ðŸ‡«ðŸ‡· La distance doit Ãªtre un entier
            'set_repetition' => 'nullable|integer', // ðŸ‡¬ðŸ‡§ Repetitions must be an integer / ðŸ‡«ðŸ‡· Le nombre de rÃ©pÃ©titions doit Ãªtre un entier
            'rest_time' => 'nullable|integer', // ðŸ‡¬ðŸ‡§ Rest time must be an integer / ðŸ‡«ðŸ‡· Le temps de repos doit Ãªtre un entier
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $swimSet = SwimSet::create($request->validated());
        return response()->json($swimSet, 201);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Display the specified resource.
     * ðŸ‡«ðŸ‡· Afficher une sÃ©rie de natation spÃ©cifique.
     */
    public function show(SwimSet $swimSet)
    {
        return response()->json($swimSet, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Update the specified resource in storage.
     * ðŸ‡«ðŸ‡· Mettre Ã  jour une sÃ©rie de natation existante.
     */
    public function update(Request $request, SwimSet $swimSet)
    {
        // ðŸ‡¬ðŸ‡§ Validate the request data
        // ðŸ‡«ðŸ‡· Valider les donnÃ©es de la requÃªte
        $validator = Validator::make($request->all(), [
            'workout_id' => 'nullable|exists:workouts,id', // ðŸ‡¬ðŸ‡§ Must reference a valid workout / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer une sÃ©ance valide
            'exercise_id' => 'nullable|exists:exercises,id', // ðŸ‡¬ðŸ‡§ Must reference a valid exercise / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un exercice valide
            'set_distance' => 'nullable|integer', // ðŸ‡¬ðŸ‡§ Distance must be an integer / ðŸ‡«ðŸ‡· La distance doit Ãªtre un entier
            'set_repetition' => 'nullable|integer', // ðŸ‡¬ðŸ‡§ Repetitions must be an integer / ðŸ‡«ðŸ‡· Le nombre de rÃ©pÃ©titions doit Ãªtre un entier
            'rest_time' => 'nullable|integer', // ðŸ‡¬ðŸ‡§ Rest time must be an integer / ðŸ‡«ðŸ‡· Le temps de repos doit Ãªtre un entier
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $swimSet->update($request->validated());
        return response()->json($swimSet, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Remove the specified resource from storage.
     * ðŸ‡«ðŸ‡· Supprimer une sÃ©rie de natation spÃ©cifique de la base de donnÃ©es.
     */
    public function destroy(SwimSet $swimSet)
    {
        $swimSet->delete();
        return response()->json(null, 204);
    }
}
