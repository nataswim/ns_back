<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Workout;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class WorkoutController extends Controller
{
    /**
     * ðŸ‡¬ðŸ‡§ Display a listing of the resource.
     * ðŸ‡«ðŸ‡· Afficher la liste des sÃ©ances d'entraÃ®nement.
     */
    public function index()
    {
        $workouts = Workout::all();
        return response()->json($workouts, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Store a newly created resource in storage.
     * ðŸ‡«ðŸ‡· Enregistrer une nouvelle sÃ©ance d'entraÃ®nement dans la base de donnÃ©es.
     */
    public function store(Request $request)
    {
        // ðŸ‡¬ðŸ‡§ Validate the request data
        // ðŸ‡«ðŸ‡· Valider les donnÃ©es de la requÃªte
        $validator = Validator::make($request->all(), [
            'title' => 'required|max:255', // ðŸ‡¬ðŸ‡§ Title is required / ðŸ‡«ðŸ‡· Le titre est obligatoire
            'description' => 'nullable', // ðŸ‡¬ðŸ‡§ Description is optional / ðŸ‡«ðŸ‡· La description est facultative
            'workout_category' => 'nullable|max:255', // ðŸ‡¬ðŸ‡§ Category is optional / ðŸ‡«ðŸ‡· La catÃ©gorie est facultative
            'user_id' => 'required|exists:users,id', // ðŸ‡¬ðŸ‡§ Must reference a valid user / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un utilisateur valide
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $workout = Workout::create($request->validated());
        return response()->json($workout, 201);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Display the specified resource.
     * ðŸ‡«ðŸ‡· Afficher une sÃ©ance d'entraÃ®nement spÃ©cifique.
     */
    public function show(Workout $workout)
    {
        return response()->json($workout, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Update the specified resource in storage.
     * ðŸ‡«ðŸ‡· Mettre Ã  jour une sÃ©ance d'entraÃ®nement existante.
     */
    public function update(Request $request, Workout $workout)
    {
        // ðŸ‡¬ðŸ‡§ Validate the update request
        // ðŸ‡«ðŸ‡· Valider la requÃªte de mise Ã  jour
        $validator = Validator::make($request->all(), [
            'title' => 'required|max:255', // ðŸ‡¬ðŸ‡§ Title is required / ðŸ‡«ðŸ‡· Le titre est obligatoire
            'description' => 'nullable', // ðŸ‡¬ðŸ‡§ Description is optional / ðŸ‡«ðŸ‡· La description est facultative
            'workout_category' => 'nullable|max:255', // ðŸ‡¬ðŸ‡§ Category is optional / ðŸ‡«ðŸ‡· La catÃ©gorie est facultative
            'user_id' => 'required|exists:users,id', // ðŸ‡¬ðŸ‡§ Must reference a valid user / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un utilisateur valide
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $workout->update($request->validated());
        return response()->json($workout, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Remove the specified resource from storage.
     * ðŸ‡«ðŸ‡· Supprimer une sÃ©ance d'entraÃ®nement spÃ©cifique de la base de donnÃ©es.
     */
    public function destroy(Workout $workout)
    {
        $workout->delete();
        return response()->json(null, 204);
    }
}
